# -*- coding: utf-8 -*-

# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2015 Jonathan Labéjof <jonathan.labejof@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

from b3j0f.stap.organize import (
    mdateorganize, DEFAULT_IPATH, DEFAULT_OPATH, DEFAULT_PREFIX
)

from argparse import ArgumentParser


def main():
    """Parse argvs and call the organizer function."""

    epilog = 'This tool brings a solution to people which get media files \
from people, in organizing all files by the moment they have been modified (\
the moment when a picture/video has been taken). Technically, it organizes \
all files from a directory by modification date. That means if you want to \
modify your media files because you have problems of light or sounds, I \
advice you might use this tool before.'

    parser = ArgumentParser(
        description='Organize files by modification date from a directory.',
        epilog=epilog
    )

    parser.add_argument(
        '-i', '--ipath', help='Input directory path.',
        default=DEFAULT_IPATH, required=False, desc='ipath'
    )

    parser.add_argument(
        '-o', '--opath', help='Output directory path.',
        default=DEFAULT_OPATH, required=False, dest='opath'
    )

    parser.add_argument(
        '-p', '--prefix', help='Prefix of organized file name.',
        required=False, dest='prefix', default=DEFAULT_PREFIX
    )

    parser.add_argument(
        '-r', '--regex', help='Regex file names to organize.',
        required=False, dest='regex'
    )

    parser.add_argument(
        '-e', '--extensions', help='File extensions to organize.',
        required=False, dest='extensions'
    )

    parser.add_argument(
        '-f', '--followlinks', help='Follow links.', default=False,
        action='store_true', dest='followlinks'
    )

    args = parser.parse_args()

    mdateorganize(**args)
